<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bots Telegram - Botnewsbr</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header */
        .header {
            background: #fff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: 700;
            color: #2481cc;
        }

        .stats {
            font-size: 0.9rem;
            color: #666;
        }

        /* Search */
        .search-section {
            background: #fff;
            padding: 2rem 0;
            border-bottom: 1px solid #e5e5e5;
        }

        .search-container {
            max-width: 600px;
            margin: 0 auto;
            position: relative;
        }

        .search-bar {
            width: 100%;
            padding: 1rem 3rem 1rem 1rem;
            border: 2px solid #e5e5e5;
            border-radius: 8px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.3s ease;
        }

        .search-bar:focus {
            border-color: #2481cc;
        }

        .search-btn {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: #2481cc;
            border: none;
            padding: 0.5rem;
            border-radius: 6px;
            color: white;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .search-btn:hover {
            background: #1a6ba3;
        }

        /* Main Content */
        .main-content {
            background: #fff;
            padding: 2rem 0;
            min-height: 80vh;
        }

        .section-title {
            font-size: 1.8rem;
            margin-bottom: 0.5rem;
            color: #333;
        }

        .subtitle {
            color: #666;
            margin-bottom: 2rem;
        }

        /* Bot Grid */
        .bot-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 1.5rem;
            margin-top: 1rem;
        }

        .bot-card {
            background: #fff;
            border: 1px solid #e5e5e5;
            border-radius: 8px;
            padding: 1.5rem;
            transition: all 0.3s ease;
        }

        .bot-card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .bot-header {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .bot-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: #2481cc;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
            font-weight: bold;
            flex-shrink: 0;
        }

        .bot-info {
            flex: 1;
        }

        .bot-name {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
            color: #333;
        }

        .bot-username {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .bot-description {
            color: #555;
            font-size: 0.95rem;
            margin-bottom: 1rem;
            line-height: 1.5;
        }

        .bot-tags {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .tag {
            background: #f0f8ff;
            color: #2481cc;
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .bot-actions {
            display: flex;
            gap: 0.75rem;
        }

        .btn {
            padding: 0.6rem 1.2rem;
            border: none;
            border-radius: 6px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            text-align: center;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: #2481cc;
            color: white;
        }

        .btn-primary:hover {
            background: #1a6ba3;
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #333;
            border: 1px solid #e5e5e5;
        }

        .btn-secondary:hover {
            background: #e9ecef;
        }

        /* Loading */
        .loading {
            text-align: center;
            padding: 3rem;
            color: #666;
        }

        .loading::after {
            content: '';
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #e5e5e5;
            border-top: 2px solid #2481cc;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* No Results */
        .no-results {
            text-align: center;
            padding: 3rem;
            color: #666;
        }

        .no-results svg {
            width: 64px;
            height: 64px;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }
            
            .bot-grid {
                grid-template-columns: 1fr;
            }
            
            .bot-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">Bots Telegram</div>
                <div class="stats" id="statsDisplay">
                    <span id="botCount">0</span> bots disponíveis
                </div>
            </div>
        </div>
    </header>

    <section class="search-section">
        <div class="container">
            <div class="search-container">
                <input type="text" class="search-bar" placeholder="Pesquisar bots..." id="searchInput">
                <button class="search-btn" onclick="searchBots()">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="11" cy="11" r="8"></circle>
                        <path d="m21 21-4.35-4.35"></path>
                    </svg>
                </button>
            </div>
        </div>
    </section>

    <main class="main-content">
        <div class="container">
            <h1 class="section-title">Bots em Destaque</h1>
            <p class="subtitle">Descubra os melhores bots do Telegram</p>
            
            <div class="bot-grid" id="botGrid">
                <div class="loading">Carregando bots...</div>
            </div>
        </div>
    </main>

    <script>
        // Função para buscar dados do canal t.me/s/Botnewsbr
        async function fetchBotsFromChannel() {
            try {
                // Em produção, você usaria um proxy/backend para contornar CORS
                // Por exemplo: const response = await fetch('/api/scrape-telegram');
                
                // Para demonstração, vou simular dados que viriam do canal
                const simulatedData = await simulateChannelData();
                return simulatedData;
            } catch (error) {
                console.error('Erro ao buscar dados do canal:', error);
                return [];
            }
        }

        // Simula dados que viriam do canal (substitua pela implementação real)
        async function simulateChannelData() {
            // Simula delay de rede
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Dados simulados baseados no tipo de conteúdo esperado do canal
            return [
                {
                    id: 1,
                    name: "SpotiBot",
                    username: "@spoti_bot",
                    description: "Bot para baixar músicas do Spotify diretamente no Telegram. Qualidade alta e interface simples.",
                    category: "música",
                    telegramLink: "https://t.me/spoti_bot"
                },
                {
                    id: 2,
                    name: "FileConverterBot",
                    username: "@file_converter_bot",
                    description: "Converte arquivos entre diferentes formatos. PDF, imagens, documentos e muito mais.",
                    category: "utilidades",
                    telegramLink: "https://t.me/file_converter_bot"
                },
                {
                    id: 3,
                    name: "WeatherNowBot",
                    username: "@weather_now_bot",
                    description: "Previsão do tempo em tempo real para qualquer cidade do mundo. Alertas inclusos.",
                    category: "clima",
                    telegramLink: "https://t.me/weather_now_bot"
                },
                {
                    id: 4,
                    name: "QuizMasterBot",
                    username: "@quiz_master_bot",
                    description: "Jogos de quiz interativos para grupos. Várias categorias e níveis de dificuldade.",
                    category: "jogos",
                    telegramLink: "https://t.me/quiz_master_bot"
                },
                {
                    id: 5,
                    name: "TranslatorBot",
                    username: "@translator_bot",
                    description: "Traduz mensagens instantaneamente entre mais de 100 idiomas diferentes.",
                    category: "utilidades",
                    telegramLink: "https://t.me/translator_bot"
                },
                {
                    id: 6,
                    name: "NewsBot",
                    username: "@news_bot",
                    description: "Notícias atualizadas em tempo real. Configure alertas para tópicos específicos.",
                    category: "notícias",
                    telegramLink: "https://t.me/news_bot"
                },
                {
                    id: 7,
                    name: "ShortenerBot",
                    username: "@shortener_bot",
                    description: "Encurta links longos e gera QR codes. Estatísticas de cliques incluídas.",
                    category: "utilidades",
                    telegramLink: "https://t.me/shortener_bot"
                },
                {
                    id: 8,
                    name: "ReminderBot",
                    username: "@reminder_bot",
                    description: "Lembretes personalizados e alarmes. Nunca mais esqueça compromissos importantes.",
                    category: "produtividade",
                    telegramLink: "https://t.me/reminder_bot"
                }
            ];
        }

        let allBots = [];
        let filteredBots = [];

        function getInitials(name) {
            return name.split(' ').map(word => word[0]).join('').toUpperCase().slice(0, 2);
        }

        function getCategoryColor(category) {
            const colors = {
                'música': '#1db954',
                'utilidades': '#2481cc',
                'clima': '#ff6b35',
                'jogos': '#8b5cf6',
                'notícias': '#ef4444',
                'produtividade': '#22c55e'
            };
            return colors[category] || '#2481cc';
        }

        function renderBots(bots) {
            const botGrid = document.getElementById('botGrid');
            const botCount = document.getElementById('botCount');
            
            botCount.textContent = bots.length;
            
            if (bots.length === 0) {
                botGrid.innerHTML = `
                    <div class="no-results">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="11" cy="11" r="8"></circle>
                            <path d="m21 21-4.35-4.35"></path>
                        </svg>
                        <h3>Nenhum bot encontrado</h3>
                        <p>Tente ajustar sua pesquisa ou verifique a conexão.</p>
                    </div>
                `;
                return;
            }

            botGrid.innerHTML = bots.map(bot => `
                <div class="bot-card">
                    <div class="bot-header">
                        <div class="bot-avatar" style="background: ${getCategoryColor(bot.category)}">
                            ${getInitials(bot.name)}
                        </div>
                        <div class="bot-info">
                            <div class="bot-name">${bot.name}</div>
                            <div class="bot-username">${bot.username}</div>
                        </div>
                    </div>
                    <div class="bot-description">${bot.description}</div>
                    <div class="bot-tags">
                        <span class="tag">${bot.category}</span>
                    </div>
                    <div class="bot-actions">
                        <a href="${bot.telegramLink}" target="_blank" class="btn btn-primary">
                            Abrir no Telegram
                        </a>
                        <button class="btn btn-secondary" onclick="copyLink('${bot.telegramLink}')">
                            Copiar Link
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function searchBots() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
            
            if (!searchTerm) {
                filteredBots = allBots;
            } else {
                filteredBots = allBots.filter(bot => 
                    bot.name.toLowerCase().includes(searchTerm) ||
                    bot.description.toLowerCase().includes(searchTerm) ||
                    bot.username.toLowerCase().includes(searchTerm) ||
                    bot.category.toLowerCase().includes(searchTerm)
                );
            }
            
            renderBots(filteredBots);
        }

        function copyLink(link) {
            navigator.clipboard.writeText(link).then(() => {
                // Feedback visual simples
                const btn = event.target;
                const originalText = btn.textContent;
                btn.textContent = 'Copiado!';
                setTimeout(() => {
                    btn.textContent = originalText;
                }, 2000);
            });
        }

        // Event listeners
        document.getElementById('searchInput').addEventListener('input', searchBots);
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchBots();
            }
        });

        // Inicializar aplicação
        async function init() {
            try {
                allBots = await fetchBotsFromChannel();
                filteredBots = allBots;
                renderBots(filteredBots);
            } catch (error) {
                console.error('Erro ao inicializar:', error);
                document.getElementById('botGrid').innerHTML = `
                    <div class="no-results">
                        <h3>Erro ao carregar bots</h3>
                        <p>Verifique sua conexão e tente novamente.</p>
                    </div>
                `;
            }
        }

        // Função para implementar scraping real (para ser usada no backend)
        /*
        async function scrapeRealTelegramChannel() {
            // Esta função seria implementada no seu servidor backend
            // usando bibliotecas como Puppeteer, Cheerio, etc.
            
            const response = await fetch('/api/scrape-telegram-channel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    channelUrl: 'https://t.me/s/Botnewsbr'
                })
            });
            
            return await response.json();
        }
        */

        // Carregar dados iniciais
        init();
    </script>
</body>
</html> 